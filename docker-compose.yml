## для большей изолированости безопасности ресурсов размещаю их в разных network frontend_net , app1_net , app2_net

services:
  # Das ist Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
     ## - "--certificateresolvers.myresolver.acme.httpchallenge=true"
     ## -"--certificateresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--entrypoints.traefik.address=:8080"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=traefik"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" 
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    user: root
    networks:
     - frontend_net
     - app1_net
     - app2_net

  # Das ist Prometheus
  prometheus:
    image: prom/prometheus:v2.29.2
    container_name: prometheus
    volumes: 
       - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
       - ./prometheus/rules.yml:/etc/prometheus/rules.yml 
    ports:
      - "9090:9090"
    networks:
      - frontend_net

 # Alertmanager
  alertmanager:
    image: prom/alertmanager:v0.24.0
    container_name: alertmanager
    volumes:
       - /home/jambo2/auto-deploy-stack/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - frontend_net
    environment:
      - TELEGRAM_CHAT_ID=""
      - TELEGRAM_BOT_TOKEN=""


  # Grafana
  grafana:
    image: grafana/grafana:8.1.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    ports:
      - "3001:3000"
    networks:
      - frontend_net

  # Flask app 1
  app1: 
    build: ./apps/app1
    container_name: app1
    environment:
      - VIRTUAL_HOST=app1.localhost
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.app1.rule=Host(`app1.localhost`)" 
      - "traefik.http.services.app1.loadbalancer.server.port=5000"
      - "traefik.http.middlewares.app1-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.app1-ratelimit.ratelimit.burst=50"
      - "traefik.http.routers.app1.middlewares=app1-ratelimit@docker"
    networks: 
      - app1_net
      


  # Flask app2 app2:
    build: ./apps/app2
    container_name: app2
    environment:
      - VIRTUAL_HOST=app2.localhost
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app2.rule=Host(`app2.localhost`)"
      - "traefik.http.services.app2.loadbalancer.server.port=5000"
         # указываю среднее кол во лимит запросов ### регулирую лимит запросов 
      - "traefik.http.middlewares.app2-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.app2-ratelimit.ratelimit.burst=50"
      - "traefik.http.routers.app2.middlewares=app2-ratelimit@docker"
    networks:
      - app2_net
      


networks:
  frontend_net:
  app1_net:
  app2_net:
  
